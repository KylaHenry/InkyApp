AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Inky-Backend

Globals:
  Function:
    Timeout: 3
    MemorySize: 128
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON

Resources:
  InkyApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: Inky-Api-Main
      StageName: Prod
      Auth:
        ApiKeyRequired: true 

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Functions/Example/hello_world
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref InkyApi
            Path: /hello
            Method: get
            Auth:
              ApiKeyRequired: true  

  GoodbyeWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Functions/Example/goodbye_world/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Timeout: 10
      Layers:
        - arn:aws:lambda:us-east-1:831926586049:layer:requests:1
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "ssm:GetParameter"
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/myapp/api_key"
      Events:
        GoodbyeWorld:
          Type: Api
          Properties:
            RestApiId: !Ref InkyApi
            Path: /goodbye
            Method: get
            Auth:
              ApiKeyRequired: false

  UserCredReceivePrivateFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Functions/UserCred/UserCred-Receive-Private/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - subnet-0cf6afa526ab19556
          - subnet-0038a371c59bbe948
      Environment:
        Variables:
          DB_PARAMETER_NAME: "/database/credentials"  # Parameter Store name
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "ssm:GetParameter"
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/database/credentials"

  UserCredSendPublicFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Functions/UserCred/UserCred-Send-Public/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Timeout: 10
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "lambda:InvokeFunction"
              Resource: !GetAtt UserCredReceivePrivateFunction.Arn
      Environment:
        Variables:
          PRIVATE_FUNCTION_ARN: !GetAtt UserCredReceivePrivateFunction.Arn
      Events:
        UserCredSendPublicEvent:
          Type: Api
          Properties:
            RestApiId: !Ref InkyApi
            Path: /usercredsendpublic
            Method: post
            Auth:
              ApiKeyRequired: false


  CreateUsernameFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Functions/UserInformation/CreateUsername
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - subnet-0cf6afa526ab19556
          - subnet-0038a371c59bbe948
      Environment:
        Variables:
          DB_PARAMETER_NAME: "/database/credentials"  # Parameter Store name
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSLambdaBasicExecutionRole
        - Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "ssm:GetParameter"
              Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/database/credentials"


  MyApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Enabled: true
      Name: MyApiKey
      StageKeys:
        - RestApiId: !Ref InkyApi
          StageName: Prod


  TestSecretFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: Functions/Debug/test-secret/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Timeout: 30
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - subnet-0cf6afa526ab19556
          - subnet-0038a371c59bbe948
      Environment:
        Variables:
          DB_HOST: 'inky-database.cxgmeo0oo52y.us-east-1.rds.amazonaws.com'
          DB_PORT: '3306'
          DB_NAME: 'StoryApp'  # Replace with your actual database name
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: "Allow"
              Action:
                - "ssm:GetParameter"
              Resource:
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/database/username"
                - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/database/password"

      Events:
        TestSecretApi:
          Type: Api
          Properties:
            RestApiId: !Ref InkyApi
            Path: /test-secret
            Method: get
            Auth:
              ApiKeyRequired: false

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: vpc-0214891ecbe0d52db  

  MyUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: MyApiUsagePlan
      Description: "Usage plan for the Inky API"
      ApiStages:
        - ApiId: !Ref InkyApi
          Stage: Prod  # Use the stage name directly

Outputs:
  InkyApiUrl:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${InkyApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  HelloWorldFunctionArn:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt HelloWorldFunction.Arn

  GoodbyeWorldFunctionArn:
    Description: Goodbye World Lambda Function ARN
    Value: !GetAtt GoodbyeWorldFunction.Arn

  UserCredReceivePrivateFunctionArn:
    Description: UserCred Receive Private Function ARN
    Value: !GetAtt UserCredReceivePrivateFunction.Arn

  UserCredSendPublicFunctionArn:
    Description: UserCred Send Public Function ARN
    Value: !GetAtt UserCredSendPublicFunction.Arn

  HelloWorldFunctionIamRole:
    Description: Implicit IAM Role created for Hello World function
    Value: !GetAtt HelloWorldFunctionRole.Arn

  TestSecretFunctionArn:
    Description: Test Secret Function ARN
    Value: !GetAtt TestSecretFunction.Arn
